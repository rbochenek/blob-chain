
//! Autogenerated weights for `pallet_blobmanager`
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 42.0.0
//! DATE: 2024-09-24, STEPS: `20`, REPEAT: `50`, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! WORST CASE MAP SIZE: `1000000`
//! HOSTNAME: `noop`, CPU: `AMD Ryzen Threadripper PRO 5965WX 24-Cores`
//! WASM-EXECUTION: `Compiled`, CHAIN: `None`, DB CACHE: `1024`

// Executed Command:
// target/release/blobchain-node
// benchmark
// pallet
// --runtime
// target/release/wbuild/blobchain-runtime/blobchain_runtime.compact.compressed.wasm
// --genesis-builder=runtime
// --pallet
// pallet_blobmanager
// --extrinsic
// *
// --template
// ../../frame-weight-template.hbs
// --output
// pallets/blobmanager/src/weights.rs
// --steps
// 20
// --repeat
// 50

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]
#![allow(missing_docs)]

use frame_support::{traits::Get, weights::{Weight, constants::RocksDbWeight}};
use core::marker::PhantomData;

/// Weight functions needed for `pallet_blobmanager`.
pub trait WeightInfo {
	fn set_uploader() -> Weight;
	fn upload_blob() -> Weight;
}

/// Weights for `pallet_blobmanager` using the Substrate node and recommended hardware.
pub struct SubstrateWeight<T>(PhantomData<T>);
impl<T: frame_system::Config> WeightInfo for SubstrateWeight<T> {
	/// Storage: `BlobManager::Uploader` (r:0 w:1)
	/// Proof: `BlobManager::Uploader` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	fn set_uploader() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 2_420_000 picoseconds.
		Weight::from_parts(2_570_000, 0)
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
	/// Storage: `BlobManager::Uploader` (r:1 w:0)
	/// Proof: `BlobManager::Uploader` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `BlobManager::Blobs` (r:1 w:1)
	/// Proof: `BlobManager::Blobs` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn upload_blob() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `37`
		//  Estimated: `3502`
		// Minimum execution time: 506_921_000 picoseconds.
		Weight::from_parts(525_881_000, 3502)
			.saturating_add(T::DbWeight::get().reads(2_u64))
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
}

// For backwards compatibility and tests.
impl WeightInfo for () {
	/// Storage: `BlobManager::Uploader` (r:0 w:1)
	/// Proof: `BlobManager::Uploader` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	fn set_uploader() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 2_420_000 picoseconds.
		Weight::from_parts(2_570_000, 0)
			.saturating_add(RocksDbWeight::get().writes(1_u64))
	}
	/// Storage: `BlobManager::Uploader` (r:1 w:0)
	/// Proof: `BlobManager::Uploader` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `BlobManager::Blobs` (r:1 w:1)
	/// Proof: `BlobManager::Blobs` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn upload_blob() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `37`
		//  Estimated: `3502`
		// Minimum execution time: 506_921_000 picoseconds.
		Weight::from_parts(525_881_000, 3502)
			.saturating_add(RocksDbWeight::get().reads(2_u64))
			.saturating_add(RocksDbWeight::get().writes(1_u64))
	}
}
